os: Visual Studio 2017
environment:
  MSYSTEM: MINGW64
  matrix:

    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    - PYTHON: "C:\\Python36-x64"

  global:
      CONDA_INSTALL_LOCN: C:\\Miniconda36-x64

install:
  # We need wheel installed to build wheels
  - set PATH=%PYTHON_PATH%;%PYTHON_PATH%\Scripts;C:\msys64\usr\bin;%PATH%
  - bash -lc ""
  - bash -lc "pacman --noconfirm --needed -Sy bash pacman pacman-mirrors msys2-runtime msys2-runtime-devel"
  - bash -lc "rm -f /mingw64/etc/gdbinit"
  - bash -lc "pacman --noconfirm -S mingw-w64-x86_64-{gcc,gcc-ada,gcc-fortran,gcc-libgfortran,gcc-objc,cmake,make,zlib,lapack}"
  - "%PYTHON%\\python.exe -m pip install wheel"
  - "%PYTHON%\\python.exe -m pip install -r requirements.txt"
  #- "call %CONDA_INSTALL_LOCN%\\Scripts\\activate.bat"
  #- "conda config --add channels conda-forge --force"
  #- "conda install -y lapack"
  - call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64
  #- set "LIB=%CONDA_INSTALL_LOCN%\\Library\lib;%LIB%"
  #- set "CPATH=%CONDA_INSTALL_LOCN%\\Library\include;%CPATH%"
  #- set "INCLUDE=%CONDA_INSTALL_LOCN%\\Library\include;%INCLUDE%"

build: off

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  #- set "LIB=%CONDA_INSTALL_LOCN%\\Library\lib;%LIB%"
  #- set "CPATH=%CONDA_INSTALL_LOCN%\\Library\include;%CPATH%"
  #- set "INCLUDE=%CONDA_INSTALL_LOCN%\\Library\include;%INCLUDE%"
  - set "PATH=C:\msys64\mingw64\bin;%PATH%"
  - "%PYTHON%\\python.exe setup.py test"

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - set PATH=C:\msys64\mingw64\bin;%PATH%
  - "%PYTHON%\\python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
